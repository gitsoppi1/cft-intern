---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template LAMP_Single_Instance: Create a LAMP
  stack using a single EC2 instance and a local MySQL database for storage. This template
  demonstrates using the AWS CloudFormation bootstrap scripts to install the packages
  and files necessary to deploy the Apache web server, PHP and MySQL at instance launch
  time. **WARNING** This template creates an Amazon EC2 instance. You will be billed
  for the AWS resources used if you create a stack from this template.'
Parameters:
  KeyName:
    Description: key name
    Type: AWS::EC2::KeyPair::KeyName
    Default: 22
  DBName:
    Default: MyDatabase
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  DBRootPassword:
    NoEcho: 'true'
    Description: Root password for MySQL
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: " The IP address range that can be used to SSH to the EC2 instances"
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ibex-vpc
  subNamepub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 10.10.1.0/24
      Tags:
        - Key: Name
          Value: ibex-pub1
  subNamepub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 10.10.2.0/24
      Tags:
        - Key: Name
          Value: ibex-pub2
  subNamepri1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 10.10.3.0/24
      Tags:
        - Key: Name
          Value: ibex-pri1
  subNamepri2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 10.10.4.0/24
      Tags:
        - Key: Name
          Value: ibex-pri2
  routeTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ibex-pub-routeSecurityGroupsIds
  routeTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ibex-pri-routeSecurityGroupsIds
  routeTableAssocName1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subNamepub1
      RouteTableId: !Ref routeTable1
  routeTableAssocName2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subNamepub2
      RouteTableId: !Ref routeTable1
  routeTableAssocName3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subNamepri1
      RouteTableId: !Ref routeTable2
  routeTableAssocName4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subNamepri2
      RouteTableId: !Ref routeTable2
  igwName:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ibex-igw
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref igwName
  routeName1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref routeTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igwName
  MyeipName:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  MyNat:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyeipName.AllocationId
      SubnetId: !Ref subNamepub1
      Tags:
        - Key: Name
          Value: ibex-eip
  routeName2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref routeTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNat
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host #required
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0    
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0  
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      Subnets: 
        - !Ref subNamepub1
        - !Ref subNamepub2
      Listeners:
      - LoadBalancerPort: '80'
      InstancePort: '80'
      Protocol: http
  AutoScaling:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier: 
       - !Ref subNamepub1
      AutoScalingGroupName: Wordpress
      AvailabilityZones:
      - us-east-1a
      Cooldown: 600
      DesiredCapacity: 2
      HealthCheckGracePeriod: 0
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref wordpress
      MaxSize: 3 #required
      MinSize: 2 #required
  wordpress:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Install
          - Configure
        Install:
          packages:
            yum:
              mysql: []
              mysql-server: []
              mysql-libs: []
              httpd: []
              php: [5.6]
              php-mysql: []
          files:
            "/var/www/html/index.php":
              content:
                Fn::Join:
                - ''
                - - "<html>\n"
                  - "  <head>\n"
                  - "    <title>AWS CloudFormation PHP Sample</title>\n"
                  - '    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">

'
                  - "  </head>\n"
                  - "  <body>\n"
                  - "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n"
                  - "    <p/>\n"
                  - "    <?php\n"
                  - "      // Print out the current data and time\n"
                  - '      print "The Current Date and Time is: <br/>";

'
                  - '      print date("g:i A l, F j Y.");

'
                  - "    ?>\n"
                  - "    <p/>\n"
                  - "    <?php\n"
                  - "      // Setup a handle for CURL\n"
                  - "      $curl_handle=curl_init();\n"
                  - "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n"
                  - "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n"
                  - "      // Get the hostname of the intance from the instance metadata\n"
                  - "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n"
                  - "      $hostname = curl_exec($curl_handle);\n"
                  - "      if (empty($hostname))\n"
                  - "      {\n"
                  - '        print "Sorry, for some reason, we got no hostname back
                    <br />";

'
                  - "      }\n"
                  - "      else\n"
                  - "      {\n"
                  - '        print "Server = " . $hostname . "<br />";

'
                  - "      }\n"
                  - "      // Get the instance-id of the intance from the instance
                    metadata\n"
                  - "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n"
                  - "      $instanceid = curl_exec($curl_handle);\n"
                  - "      if (empty($instanceid))\n"
                  - "      {\n"
                  - '        print "Sorry, for some reason, we got no instance id
                    back <br />";

'
                  - "      }\n"
                  - "      else\n"
                  - "      {\n"
                  - '        print "EC2 instance-id = " . $instanceid . "<br />";

'
                  - "      }\n"
                  - '      $Database   = "localhost";

'
                  - '      $DBUser     = "'
                  - Ref: DBUser
                  - "\";\n"
                  - '      $DBPassword = "'
                  - Ref: DBPassword
                  - "\";\n"
                  - '      print "Database = " . $Database . "<br />";

'
                  - "      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)\n"
                  - '                      or die("Could not connect: " . mysql_error());

'
                  - '      print ("Connected to $Database successfully");

'
                  - "      mysql_close($dbconnection);\n"
                  - "    ?>\n"
                  - "    <h2>PHP Information</h2>\n"
                  - "    <p/>\n"
                  - "    <?php\n"
                  - "      phpinfo();\n"
                  - "    ?>\n"
                  - "  </body>\n"
                  - "</html>\n"
              mode: '000600'
              owner: apache
              group: apache
            "/tmp/setup.mysql":
              content:
                Fn::Join:
                - ''
                - - 'CREATE DATABASE '
                  - Ref: DBName
                  - ";\n"
                  - 'GRANT ALL ON '
                  - Ref: DBName
                  - ".* TO '"
                  - Ref: DBUser
                  - "'@localhost IDENTIFIED BY '"
                  - Ref: DBPassword
                  - "';\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - 'triggers=post.update

'
                  - 'path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
SubnetId: !Ref subnet
'
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - "         --stack "
                  - Ref: AWS::StackName
                  - "         --resource WebServerInstance "
                  - "         --configsets InstallAndRun "
                  - "         --region "
                  - Ref: AWS::Region
                  - "\n"
                  - 'runas=root

'
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        Configure:
          commands:
            01_set_mysql_root_password:
              command:
                Fn::Join:
                - ''
                - - mysqladmin -u root password '
                  - Ref: DBRootPassword
                  - "'"
              test:
                Fn::Join:
                - ''
                - - "$(mysql "
                  - Ref: DBName
                  - " -u root --password='"
                  - Ref: DBRootPassword
                  - "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
            02_create_database:
              command:
                Fn::Join:
                - ''
                - - mysql -u root --password='
                  - Ref: DBRootPassword
                  - "' < /tmp/setup.mysql"
              test:
                Fn::Join:
                - ''
                - - "$(mysql "
                  - Ref: DBName
                  - " -u root --password='"
                  - Ref: DBRootPassword
                  - "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
    Properties:
      ImageId: ami-00eb20669e0990cb4
      InstanceType: !Ref InstanceType 
      KeyName: !Ref KeyName
      
UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - 'yum update -y aws-cfn-bootstrap

'
            - "# Install the files and packages from the metadata\n"
            - "/opt/aws/bin/cfn-init -v "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource WebServerInstance "
            - "         --configsets InstallAndRun "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
            - "# Signal the status from cfn-init\n"
            - "/opt/aws/bin/cfn-signal -e $? "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource WebServerInstance "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
    